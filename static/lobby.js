// Generated by CoffeeScript 1.9.3
(function() {
  var challenge, challengeRespondAccept, challengeRespondDecline, updater;

  challenge = function(form) {
    var message;
    message = form.formToDict();
    message.message = "challenge";
    message.challenge_number = updater.challengeNumber;
    updater.socket.send(JSON.stringify(message));
    return form.find('lobbyform[type=text]').val('').select();
  };

  challengeRespondAccept = function(form) {
    var message;
    message = form.formToDict();
    message.message = "challenge3a";
    message.challenge_number = updater.challengeNumber;
    updater.socket.send(JSON.stringify(message));
    return form.find('challengeform[type=text]').val('').select();
  };

  challengeRespondDecline = function(form) {
    var message;
    message = form.formToDict();
    message.message = "challenge3b";
    message.challenge_number = updater.challengeNumber;
    updater.socket.send(JSON.stringify(message));
    return form.find('challengeform[type=text]').val('').select();
  };

  $(document).ready(function() {
    if (!window.console) {
      window.console = {};
    }
    if (!window.console.log) {
      window.console.log = function() {};
    }
    $('#lobbyform').live('submit', function() {
      challenge($(this));
      return false;
    });
    $('#challengeformaccept').live('submit', function() {
      challengeRespondAccept($(this));
      return false;
    });
    $('#challengeformdecline').live('submit', function() {
      challengeRespondDecline($(this));
      return false;
    });
    return updater.start();
  });

  updater = {
    socket: null,
    start: function() {
      var url;
      url = 'ws://' + location.host + '/lobbysocket';
      updater.socket = new WebSocket(url);
      updater.socket.onmessage = function(event) {
        return updater.processMessage(JSON.parse(event.data));
      };
      return updater.socket.onopen = updater.initialize;
    },
    processMessage: function(message) {
      var challengeMessage, j, k, len, len1, name, ref, ref1, userList, username;
      if (message.message === 'usernames_updated') {
        userList = '';
        ref = message.usernames;
        for (j = 0, len = ref.length; j < len; j++) {
          username = ref[j];
          userList = userList + '<input type="checkbox" value="' + username + '" name="' + username + '">' + username + '<br>';
        }
        return document.getElementById('users').innerHTML = userList;
      } else if (message.message === 'sending_name') {
        name = message.name;
        return document.getElementById('username').innerHTML = 'Hello, ' + name + '!';
      } else if (message.message === 'challenge2') {
        challengeMessage = 'You have been challenged to a game with ';
        ref1 = message.usernames;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          username = ref1[k];
          challengeMessage = challengeMessage + username + ', ';
        }
        challengeMessage = challengeMessage + '<form action="a/message/new" method="post" id="challengeformaccept"><input type="submit" name="accept" value="Accept"></form><form action="a/message/new" method="post" id="challengeformdecline"><input type="submit" name="decline" value="Decline"></form>';
        document.getElementById('status').innerHTML = challengeMessage;
        return updater.challengeNumber = message.challenge_number;
      } else if (message.message === 'game_ready') {
        return window.location.href = 'http://' + location.host + '/main.html?id=' + updater.challengeNumber;
      }
    },
    requestUsernames: function() {
      var message;
      message = {
        message: 'request_usernames'
      };
      return updater.socket.send(JSON.stringify(message));
    },
    requestOwnName: function() {
      var message;
      message = {
        message: 'request_own_name'
      };
      return updater.socket.send(JSON.stringify(message));
    },
    initialize: function() {
      updater.requestUsernames();
      return updater.requestOwnName();
    }
  };

  jQuery.fn.formToDict = function() {
    var fields, i, json;
    fields = this.serializeArray();
    json = {};
    i = 0;
    while (i < fields.length) {
      json[fields[i].name] = fields[i].value;
      i++;
    }
    if (json.next) {
      delete json.next;
    }
    return json;
  };

}).call(this);
